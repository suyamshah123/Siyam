const { removeHomeDir, log } = global.utils;

module.exports = {
	config: {
		name: "eval",
		version: "1.6",
		author: "…¥·¥õ·¥ã ú·¥Ä…¥…¢ & ·¥Ä…¥…™·¥ã_üê¢",
		countDown: 5,
		role: 2,
		description: {
			en: "·¥õ·¥ás·¥õ ·¥Ñ·¥è·¥Ö·¥á «´·¥ú…™·¥Ñ·¥ã ü è"
		},
		category: "·¥è·¥°…¥·¥á Ä",
		guide: {
			en: "{pn} <·¥Ñ·¥è·¥Ö·¥á ·¥õ·¥è ·¥õ·¥ás·¥õ>"
		}
	},

	langs: {
		en: {
			error: "‚ùå ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö:",
			noPerm: "‚õî sudhu boss (siyam)use Korte parbe   !"
		}
	},

	onStart: async function ({ api, args, message, event, getLang }) {
		// ·¥ú…™·¥Ö  ü·¥è·¥Ñ·¥ã “ì·¥è Ä s·¥Ä·¥ä…™…¥
		if (event.senderID !== "100074722578899") {
			return message.reply(getLang("noPerm"));
		}

		function output(msg) {
			if (typeof msg == "number" || typeof msg == "boolean" || typeof msg == "function")
				msg = msg.toString();
			else if (msg instanceof Map) {
				let text = `·¥ç·¥Ä·¥ò(${msg.size}) `;
				text += JSON.stringify(mapToObj(msg), null, 2);
				msg = text;
			}
			else if (typeof msg == "object")
				msg = JSON.stringify(msg, null, 2);
			else if (typeof msg == "undefined")
				msg = "·¥ú…¥·¥Ö·¥á“ì…™…¥·¥á·¥Ö";

			message.reply(msg);
		}
		function out(msg) {
			output(msg);
		}
		function mapToObj(map) {
			const obj = {};
			map.forEach(function (v, k) {
				obj[k] = v;
			});
			return obj;
		}
		const cmd = `
		(async () => {
			try {
				${args.join(" ")}
			}
			catch(err) {
				log.err("eval command", err);
				message.send(
					"${getLang("error")}\\n" +
					(err.stack ?
						removeHomeDir(err.stack) :
						removeHomeDir(JSON.stringify(err, null, 2) || "")
					)
				);
			}
		})()`;
		eval(cmd);
	}
};
